/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package laboratorium.krilek;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.NullAndEmptySource;
import org.junit.jupiter.params.provider.ValueSource;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class FriendshipsMongoTest {
    private IFriendsCollection friendsCollectionMock = mock(IFriendsCollection.class);
    private FriendshipsMongo sut;

    @BeforeEach
    public void setup(){
        friendsCollectionMock = mock(IFriendsCollection.class);
        sut = new FriendshipsMongo(friendsCollectionMock);
    }
    @Test
    public void getFriendsListOfNonExistingPerson(){
        String personName = "NonExisting";
        when(friendsCollectionMock.findByName(personName)).thenReturn(null);
        assertTrue(this.sut.getFriendsList(personName).isEmpty());
        verify(friendsCollectionMock).findByName(personName);
    }
    @Test
    public void getFriendsListOfExistingPerson(){
        String personName = "Existing";
        String friendName = "ExistingFriend";
        Person person = new Person(personName);
        person.addFriend(friendName);
        when(friendsCollectionMock.findByName(personName)).thenReturn(person);
        assertIterableEquals(Arrays.asList(friendName), this.sut.getFriendsList(personName));
        verify(friendsCollectionMock).findByName(personName);
    }

    @Test
    public void addFriendOfNonExistingAndCheckSavedName(){
        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);
        String personName = "NonExisting";
        String friendName = "ExistingFriend";
        when(friendsCollectionMock.findByName(personName)).thenReturn(null);

        this.sut.addFriend(personName, friendName);

        verify(friendsCollectionMock).save(argument.capture());
        assertEquals(personName, argument.getValue().getName());
        verify(friendsCollectionMock).findByName(personName);
    }
    @Test
    public void addFriendOfNonExistingAndCheckAddedFriend(){
        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);
        String personName = "NonExisting";
        String friendName = "ExistingFriend";
        when(friendsCollectionMock.findByName(personName)).thenReturn(null);

        this.sut.addFriend(personName, friendName);

        verify(friendsCollectionMock).save(argument.capture());
        assertEquals(Arrays.asList(friendName), argument.getValue().getFriends());
        verify(friendsCollectionMock).findByName(personName);
    }

    @Test
    public void addFriendOfExistingAndCheckSavedName(){
        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);
        String personName = "Existing";
        String friendName = "ExistingFriend";
        Person person = new Person(personName);
        person.addFriend(friendName);
        when(friendsCollectionMock.findByName(personName)).thenReturn(person);

        this.sut.addFriend(personName, friendName);

        verify(friendsCollectionMock).save(argument.capture());
        assertEquals(personName, argument.getValue().getName());
        verify(friendsCollectionMock).findByName(personName);
    }

    @Test
    public void addFriendOfExistingAndCheckAddedFriend(){
        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);
        String personName = "Existing";
        String friendName = "ExistingFriend";
        Person person = new Person(personName);
        person.addFriend(friendName);
        when(friendsCollectionMock.findByName(personName)).thenReturn(person);

        this.sut.addFriend(personName, friendName);

        verify(friendsCollectionMock).save(argument.capture());
        assertEquals(Arrays.asList(friendName), argument.getValue().getFriends());
        verify(friendsCollectionMock).findByName(personName);
    }

    @Test
    public void areFriendsOfNonExistingFirstPerson(){
        when(friendsCollectionMock.findByName(anyString())).thenReturn(null);

        assertFalse(this.sut.areFriends("NonExisting", "NotRelevant"));
    }

    @Test
    public void areFriendsOfExistingFirstPerson(){
        String personName = "Existing";
        String friendName = "ExistingFriend";
        Person person = new Person(personName);
        person.addFriend(friendName);
        when(friendsCollectionMock.findByName(anyString())).thenReturn(person);

        assertTrue(this.sut.areFriends(personName, friendName));
    }

    @Test
    public void areFriendsOfExistingFirstPersonNonExistingFriend(){
        String personName = "Existing";
        String friendName = "ExistingFriend";
        Person person = new Person(personName);
        person.addFriend(friendName);
        when(friendsCollectionMock.findByName(anyString())).thenReturn(person);

        assertFalse(this.sut.areFriends(personName, "NonExistingFriend"));
    }

    @Test
    public void makeFriendsNonExisting()
    {
        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);

        String pAName = "PersonA";
        String pBName = "PersonB";
        Person pA = new Person();
        when(friendsCollectionMock.findByName(pAName)).thenReturn(null);
        when(friendsCollectionMock.findByName(pBName)).thenReturn(null);

        this.sut.makeFriends(pAName, pBName);

        verify(friendsCollectionMock, times(2)).save(argument.capture());

        //Adds personB to personA list
        assertEquals(Arrays.asList(pBName), argument.getAllValues().get(0).getFriends());
        //Adds personA to personB list
        assertEquals(Arrays.asList(pAName), argument.getAllValues().get(1).getFriends());

    }

    @Test
    public void makeFriendsExisting()
    {
        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);

        String pAName = "PersonA";
        String pBName = "PersonB";
        Person pA = new Person(pAName);
        pA.addFriend("Not Relevant");
        Person pB = new Person(pBName);
        pB.addFriend("Not Relevant");
        when(friendsCollectionMock.findByName(pAName)).thenReturn(pA);
        when(friendsCollectionMock.findByName(pBName)).thenReturn(pB);

        this.sut.makeFriends(pAName, pBName);

        verify(friendsCollectionMock, times(2)).save(argument.capture());

        //Adds personB to personA list
        assertEquals(
                Arrays.asList("Not Relevant", pBName),
                argument.getAllValues().get(0).getFriends());
        //Adds personA to personB list
        assertEquals(
                Arrays.asList("Not Relevant", pAName),
                argument.getAllValues().get(1).getFriends());

    }

}
