/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package laboratorium.krilek;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.NullAndEmptySource;
import org.junit.jupiter.params.provider.ValueSource;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

// JAKI JEST CEL TESTOWANIA MOCKA??
class CarTest {
    private Car myFerrari = mock(Car.class);

    @Test
    public void test_instance_car(){
        assertTrue(myFerrari instanceof Car);
    }

    @Test
    public void test_default_behavior_needsFuel(){
        assertFalse(myFerrari.needsFuel(), "New test double should return False as boolean");
    }

    @Test
    public void test_default_behavior_temperature(){
        assertEquals(0.0, myFerrari.getEngineTemperature(), "New test double should return 0.0");
    }

    @Test
    public void test_stubbing_mock(){
        when(myFerrari.needsFuel()).thenReturn(true);
        assertTrue(myFerrari.needsFuel());
    }

    @Test
    public void test_exception(){
        when(myFerrari.needsFuel()).thenThrow(new RuntimeException());
        assertThrows(RuntimeException.class, () -> {
            myFerrari.needsFuel();
        });
    }

    @Test
    public void test_verification(){
        myFerrari.driveTo("Kartuzy");
        myFerrari.needsFuel();

        verify(myFerrari).driveTo("Kartuzy");
        verify(myFerrari).needsFuel();
        assertFalse(myFerrari.needsFuel());
    }
    @Test
    public void test_unable_to_drive_to_when_no_fuel(){
        when(myFerrari.needsFuel()).thenReturn(true);
        Mockito
                .doThrow(
                        new RuntimeException("Unable to start engine when no fuel."))
                .when(myFerrari)
                .driveTo(anyString());

        assertAll(() -> {
            assertTrue(myFerrari.needsFuel());
            assertThrows(RuntimeException.class, () -> {
                myFerrari.driveTo("Las Vegas");
            });
        });
        verify(myFerrari).driveTo("Las Vegas");
        verify(myFerrari).needsFuel();
    }
    @ParameterizedTest
    @NullAndEmptySource
    public void test_wrong_destination_cause_exception(String wrongDestination){
        Mockito.doThrow(new RuntimeException("Wrong destination.")).when(myFerrari).driveTo(wrongDestination);

        assertThrows(RuntimeException.class, () -> {
            myFerrari.driveTo(wrongDestination);
        });

        verify(myFerrari).driveTo(wrongDestination);
    }

    @ParameterizedTest
    @ValueSource(doubles = {-100, 200, Double.MIN_VALUE, Double.MAX_VALUE})
    public void test_unable_to_drive_when_engine_temp_too_high(double engineTemp){
        when(myFerrari.getEngineTemperature()).thenReturn(engineTemp);
        Mockito
                .doThrow(
                        new RuntimeException("Engine temp to extreme, try again later."))
                .when(myFerrari)
                .driveTo(anyString());

        assertAll(() -> {
            assertEquals(engineTemp, myFerrari.getEngineTemperature());
            assertThrows(RuntimeException.class, () -> {
                myFerrari.driveTo("Destination");
            });
        });
        verify(myFerrari).driveTo("Destination");
        verify(myFerrari).getEngineTemperature();
    }
}
